# 1) 路径拓扑

                                                             |X|
                                                             |X|    ← 公网/防火墙/CDN/反代层（443 友好）
                                                             |X|

|-----------|         |-------------------------------|      |X|      |-------------------------------|         |-----------|
|           |         |   CLIENT (入口 A)             |      |X|      |   SERVER (出口 B)             |         |           |
|  TARGET   |  ⇄⇄⇄   |  ┌─────────────────────────┐  |  ⇄⇄  |X|  ⇄⇄  |  ┌─────────────────────────┐  |   ⇄⇄⇄  |   USER    |
|  SERVER   |  UDP/TCP|  │ CONN POOL (A-side)      │==|===== ws / wss / tls / mtls / none =====|==│ CONN POOL (B-side)      │  |  UDP/TCP |  (终端)   |
| (业务服务)|  HTTP/TLS|  │ TLS Keystore (自签)     │  |  ⇄⇄  |X|  ⇄⇄  |  │ TLS Keystore (自签)     │  |  HTTP/TLS|           |
|           |         |  │ Node-CA / Leaf / Pinset │  |      |X|      |  │ Node-CA / Leaf / Pinset │  |         |           |
|           |         |  └─────────────────────────┘  |      |X|      |  └─────────────────────────┘  |         |           |
|           |         |   [协议策略/ACL]  ⇄⇄  (A)    | ⇄⇄ TCP/TLS ⇄⇄   |   [协议策略/ACL]  ⇄⇄ (B)    |         |           |
|-----------|         |-------------------------------|      |X|      |-------------------------------|         |-----------|
                                                          ↑
                                                          └── 控制面板：仅下发策略/证书元数据/Pin（不承载流量）

**要点**
- **A⇄B 为长连通道，天然双向**：同一底层连接同时承载“上行请求”和“下行响应”，也可承载服务端主动推送。
- **wss/tls/mtls 均由节点自签证书体系提供**：Node-CA → Leaf（短周期轮转），A/B 以 Pin/信任清单互验。
- **CONN POOL 双向复用**：同一池内连接支持多路复用（streams/session），双向流控与回压。

---

## 2) 全双工流量工作逻辑（概览）

| 阶段 | 参与方 | 输入 | 处理 | 输出 | 双向要点 |
|---|---|---|---|---|---|
| 1 | 用户→A | 任意应用流（TCP/UDP/HTTP/TLS/SOCKS） | A 进行协议识别与策略匹配 | 建立会话 | A 接收下行亦需回写用户端 |
| 2 | A⇄B | 隧道配置（双端） | 从连接池取可用连接；不足则握手（ws/wss/tls/mtls/none） | A⇄B 长连 | **同一连接承载双向帧** |
| 3 | A→B | 上行业务帧 | 封装/加密 → 复用 → 发送 | 到达 B | 与 4/5 并行发生 |
| 4 | B→A | 下行业务帧 | 封装/加密 → 复用 → 回送 | 回到 A | 与 3 并行发生 |
| 5 | B⇄TARGET | 原始用户流 | B 解封/ACL → 访问目标；响应回流 | 目标响应 | TARGET 也可主动推送（下行） |
| 6 | A⇄用户 | 回包/推送 | A 解封后回写用户端 | 最终响应 | **端到端全双工直通** |

> 注：**UDP** 以五元组映射/会话表实现“伪连接”与双向匹配，超时回收条目；**TCP/HTTP/TLS** 天然会话化。

---

## 3) A⇄B 连接池（双向语义）

| 能力 | 机制 | 上行(用户→目标) | 下行(目标→用户) | 备注 |
|---|---|---|---|---|
| 多路复用 | 单连接多 stream/session | ✅ | ✅ | 减少握手/切换；避免队头阻塞（尽量分散） |
| 流量整形 | 令牌桶/滑窗/优先级 | ✅ | ✅ | 防爆发/防饿死，保障交互型流量 |
| 回压 | TCP 窗口/应用层 backpressure | ✅ | ✅ | 防止单向淤积导致另一向饿死 |
| 心跳/探活 | ping/pong + RTT 估计 | ✅ | ✅ | 失活快速重建 |
| 自适应伸缩 | RTT/丢包/并发阈值 | ✅ | ✅ | 动态调整池大小 |
| 安全校验 | CA/Pin/SPKI 校验 | 握手时 | 握手时 | mtls 双向校验证书链 |

---

## 4) 单/双端路径（均体现双向）

| 模式 | 完整路径（双向） | A⇄B 加密 | 说明 |
|---|---|---|---|
| 单端 | USER ⇄ A ⇄ TARGET | 无 | A 与 TARGET 直接会话；上下行同路双向 |
| 双端 | USER ⇄ A ⇄(ws/wss/tls/mtls/none)⇄ B ⇄ TARGET | 可选（建议 wss/tls/mtls） | A⇄B 双向通道；B 与 TARGET 同样双向 |

---

## 5) Mermaid 时序（双向并行）

```mermaid
sequenceDiagram
    autonumber
    participant U as USER
    participant A as CLIENT(A)
    participant B as SERVER(B)
    participant T as TARGET

    U->>A: 上行数据 (任意协议)
    A-->>U: 下行数据 (回包/推送)

    A->>B: 上行帧(封装/加密，经连接池)
    B-->>A: 下行帧(封装/加密，经连接池)

    B->>T: 上行(解封后转发)
    T-->>B: 下行(目标响应/推送)
     
    Note over A,B: A⇄B 为**同一条或多条**长连，双向并行传输（streams）



| 协议    | 默认 | 可禁用 | 检测点                  | 双向生效 |
| ----- | -- | --- | -------------------- | ---- |
| TCP   | 开  | 是   | 三次握手/特征              | ✅    |
| UDP   | 开  | 是   | 五元组映射/速率             | ✅    |
| HTTP  | 开  | 是   | Header/方法/Host       | ✅    |
| TLS   | 开  | 是   | ClientHello/ALPN/SNI | ✅    |
| SOCKS | 开  | 是   | 协议标识                 | ✅    |

